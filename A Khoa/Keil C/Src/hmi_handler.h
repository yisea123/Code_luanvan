#ifndef HMI_HANDLER_H
#define HMI_HANDLER_H

#include <stdint.h>

#define HMI_TXBUFF_SIZE			512
#define HMI_RXBUFF_SIZE			512

#define HMI_USART             UART4
#define HMI_USART_CLK         RCC_APB1Periph_UART4
#define HMI_PORT              GPIOC
#define HMI_PORT_CLK					RCC_AHB1Periph_GPIOC
#define HMI_TX                GPIO_Pin_10
#define HMI_TX_SOURCE         GPIO_PinSource10
#define HMI_RX                GPIO_Pin_11
#define HMI_RX_SOURCE         GPIO_PinSource11
#define HMI_AF                GPIO_AF_UART4
#define HMI_BAUDRATE          (uint32_t)115200
#define HMI_DATA_REG          (uint32_t)HMI_USART + 0x04
#define HMI_TX_DMA_STREAM     DMA1_Stream4
#define HMI_TX_DMA_CHANNEL    DMA_Channel_4
#define HMI_TX_STREAM_IRQ     DMA1_Stream4_IRQn
#define HMI_TX_DMA_FLAG       DMA_FLAG_TCIF4   
#define HMI_RX_DMA_STREAM     DMA1_Stream2
#define HMI_RX_DMA_CHANNEL    DMA_Channel_4
#define HMI_RX_STREAM_IRQ     DMA1_Stream2_IRQn
#define HMI_RX_DMA_FLAG       DMA_FLAG_TCIF2

#define BIT0 		0x01
#define BIT1 		0x02
#define BIT2 		0x04
#define BIT3 		0x08
#define BIT4 		0x10
#define BIT5 		0x20
#define BIT6 		0x40
#define BIT7 		0x80

typedef enum
{
	/************* holding register ***********/
	/* Data Model */
	HMI_PL_JOINT_ANGLE,
	HMI_BASE_JOINT_ANGLE,
	HMI_PL_RADIUS,
	HMI_BASE_RADIUS,
	HMI_SV_ARM_LENGTH,
	HMI_CON_ARM_LENGTH,
	HMI_DEFAUT_Z_HEIGHT,
	HMI_ANGLE_SV_ARM_1,
	HMI_ANGLE_SV_ARM_2,
	HMI_ANGLE_SV_ARM_3,
	HMI_ANGLE_SV_ARM_4,
	HMI_ANGLE_SV_ARM_5,
	HMI_ANGLE_SV_ARM_6,
	
	/* Data Servo */
	HMI_SV_ANG_1,
	HMI_SV_ANG_2,
	HMI_SV_ANG_3,
	HMI_SV_ANG_4,
	HMI_SV_ANG_5,
	HMI_SV_ANG_6,

	HMI_SV_VEL_1,
	HMI_SV_VEL_2,
	HMI_SV_VEL_3,
	HMI_SV_VEL_4,
	HMI_SV_VEL_5,
	HMI_SV_VEL_6,
	
	HMI_SV_ACC_1,
	HMI_SV_ACC_2,
	HMI_SV_ACC_3,
	HMI_SV_ACC_4,
	HMI_SV_ACC_5,
	HMI_SV_ACC_6,
	
	/* Model Move */
	HMI_POS_X,
	HMI_POS_Y,
	HMI_POS_Z,
	HMI_ANGLE_ROLL,
	HMI_ANGLE_PITCH,
	HMI_ANGLE_YAW,
	
	HMI_VEL_X,
	HMI_VEL_Y,
	HMI_VEL_Z,
	HMI_VEL_ROLL,
	HMI_VEL_PITCH,
	HMI_VEL_YAW,
	
	HMI_ACC_X,
	HMI_ACC_Y,
	HMI_ACC_Z,
	HMI_ACC_ROLL,
	HMI_ACC_PITCH,
	HMI_ACC_YAW,
	
	/* Model Test */
	HMI_TEST_POS_FROM_X,
	HMI_TEST_POS_TO_X,
	HMI_TEST_POS_VEL_X,
	
	HMI_TEST_POS_FROM_Y,
	HMI_TEST_POS_TO_Y,
	HMI_TEST_POS_VEL_Y,
	
	HMI_TEST_POS_FROM_Z,
	HMI_TEST_POS_TO_Z,
	HMI_TEST_POS_VEL_Z,
	
	HMI_TEST_POS_FROM_ROLL,
	HMI_TEST_POS_TO_ROLL,
	HMI_TEST_POS_VEL_ROLL,
	
	HMI_TEST_POS_FROM_PITCH,
	HMI_TEST_POS_TO_PITCH,
	HMI_TEST_POS_VEL_PITCH,
	
	HMI_TEST_POS_FROM_YAW,
	HMI_TEST_POS_TO_YAW,
	HMI_TEST_POS_VEL_YAW,
	
	HMI_JOG_FEED_X,
	HMI_JOG_FEED_Y,
	HMI_JOG_FEED_Z,
	HMI_JOG_FEED_ROLL,
	HMI_JOG_FEED_PITCH,
	HMI_JOG_FEED_YAW,
	
	HMI_TEST_CIRCLE_RADIUS,
	HMI_TEST_CIRCLE_SPEED,
	HMI_TEST_CIRCLE_MODE,
	
	HMI_TEST_RECTANGLE_X_FROM,
	HMI_TEST_RECTANGLE_Y_FROM,
	HMI_TEST_RECTANGLE_X_TO,
	HMI_TEST_RECTANGLE_Y_TO,
	HMI_TEST_RECTANGLE_SPEED,
	HMI_TEST_RECTANGLE_MODE,
	
	HMI_TEST_ELIPSE_A,
	HMI_TEST_ELIPSE_B,
	HMI_TEST_ELIPSE_SPEED,
	HMI_TEST_ELIPSE_MODE,
	
	HMI_REG_PARAM_MAX,
}
HMI_REG_PARAMS_ENUM;

typedef enum
{
	/************* input register *************/
	//Model position
	HMI_CUR_X_POS,
	HMI_CUR_Y_POS,
	HMI_CUR_Z_POS,
	HMI_CUR_ROLL_POS,
	HMI_CUR_PITCH_POS,
	HMI_CUR_YAW_POS,
	
	//Servo enc angle
	HMI_SER_ENC_ANGLE_1,
	HMI_SER_ENC_ANGLE_2,
	HMI_SER_ENC_ANGLE_3,
	HMI_SER_ENC_ANGLE_4,
	HMI_SER_ENC_ANGLE_5,
	HMI_SER_ENC_ANGLE_6,
	
	//Servo setpoint angle
	HMI_SER_SET_ANGLE_1,
	HMI_SER_SET_ANGLE_2,
	HMI_SER_SET_ANGLE_3,
	HMI_SER_SET_ANGLE_4,
	HMI_SER_SET_ANGLE_5,
	HMI_SER_SET_ANGLE_6,
	
	HMI_TEACH_MODE_STEP,
	HMI_TEACH_MODE_CURR_STEP,
	HMI_INPUT_REG_PARAMS_MAX,
}
HMI_INPUT_REG_PARAMS_ENUM;

typedef enum
{
	//System status
	HMI_SYS_STT_IDLE,
	HMI_SYS_STT_RUN,
	HMI_SYS_STT_ERROR,
	
	//Run mode
	HMI_RUN_MOD_NONE,
	HMI_RUN_MOD_HOME,
	HMI_RUN_MOD_TEST,
	HMI_RUN_MOD_JOG,
	HMI_RUN_MOD_TEACH,
	
	//Home mode
	HMI_HOME_MOD_NONE,
	HMI_HOME_MOD_SERVO,
	HMI_HOME_MOD_MODEL,
	
	//Control mode
	HMI_CTRL_MOD_FF_POS,
	HMI_CTRL_MOD_FF_POS_VEL,
	HMI_CTRL_MOD_FB_IMU,
	HMI_CTRL_MOD_FB_ENC,
	HMI_CTRL_MOD_FB_IMU_ENC,
	HMI_CTRL_MOD_FB_IMU_ENC_LIDAR,
	
	//Test mode
	HMI_TEST_MOD_NONE,
	HMI_TEST_MOD_PID,
	HMI_TEST_MOD_PULSE,
	HMI_TEST_MOD_X,
	HMI_TEST_MOD_X_Y_LEFT,
	HMI_TEST_MOD_X_Y_RIGHT,
	HMI_TEST_MOD_Y,
	HMI_TEST_MOD_Y_Z_LEFT,
	HMI_TEST_MOD_Y_Z_RIGHT,
	HMI_TEST_MOD_Z,
	HMI_TEST_MOD_X_Z_LEFT,
	HMI_TEST_MOD_X_Z_RIGHT,
	HMI_TEST_MOD_ROLL,
	HMI_TEST_MOD_PITCH,
	HMI_TEST_MOD_YAW,
	HMI_TEST_MOD_CIRCLE,
	HMI_TEST_MOD_SQUARE,
	HMI_TEST_MOD_RANDOM_1,
	HMI_TEST_MOD_RANDOM_2,
	
	HMI_STT_SERVO_1,
	HMI_STT_SERVO_2,
	HMI_STT_SERVO_3,
	HMI_STT_SERVO_4,
	HMI_STT_SERVO_5,
	HMI_STT_SERVO_6,
	
	HMI_STT_TEACH_LAP,
	
	HMI_RUN_MODE_FOLLOW,
	HMI_TEST_MOD_ECLIPSE,
	HMI_INP_DIS_MAX,
}
HMI_INP_DIS_ENUM;

typedef enum
{
	//Button Home Screen
	BT_START = 0, //coils[0]
	BT_STOP,
	BT_CONTROL,
	BT_TEST,
	BT_TEACH,
	BT_JOG,
	BT_HOME,
	BT_HOME_SERVO = 7,
	BT_HOME_MODEL = 8, //coils[1]
	BT_SERVO_1,
	BT_SERVO_2,
	BT_SERVO_3,
	BT_SERVO_4,
	BT_SERVO_5,
	BT_SERVO_6,
	BT_SERVO_RESET = 15,
	BT_SERVO_ON_OFF_1 = 16, //coils[2]
	BT_SERVO_ON_OFF_2,
	BT_SERVO_ON_OFF_3,
	BT_SERVO_ON_OFF_4,
	BT_SERVO_ON_OFF_5,
	BT_SERVO_ON_OFF_6,
	BT_JOG_X,
	BT_JOG_Y = 23,
	BT_JOG_Z = 24, //coils[3]
	BT_JOG_ROLL,
	BT_JOG_PITCH,
	BT_JOG_YAW,
	BT_JOG_X_Y_LEFT,
	BT_JOG_X_Y_RIGHT,
	BT_JOG_X_Z_LEFT,
	BT_JOG_X_Z_RIGHT = 31,
	BT_JOG_Y_Z_LEFT = 32, //coils[4]
	BT_JOG_Y_Z_RIGHT,
	BT_RUN_MODEL,
	BT_HOME_TEACH_MODEL,
	BT_BACK_MODEL,
	BT_TEACH_MODEL,
	BT_NEXT_MODEL,
	BT_LAP_MODEL = 39,
	BT_STOP_MODEL = 40, //coils[5]
	BT_TEST_MODE_X,
	BT_TEST_MODE_Y,
	BT_TEST_MODE_Z,
	BT_TEST_MODE_X_Y,
	BT_TEST_MODE_X_Z,
	BT_TEST_MODE_Y_Z,
	BT_TEST_MODE_ROLL = 47,
	BT_TEST_MODE_PITCH = 48, //coils[6]
	BT_TEST_MODE_YAW,
	BT_TEST_MODE_PULSE,
	BT_TEST_MODE_CIRCLE,
	BT_TEST_MODE_SQUARE,
	BT_TEST_MODE_RANDOM_1,
	BT_TEST_MODE_RANDOM_2,
	BT_TEST_MODE_ECLPISE,
	BT_FOLLOW,
	BT_RESET_TEACH,
	HMI_COILS_MAX
}
HMI_COILS_ENUM;

typedef void (*HMI_HANDLER_FUNC)(void);

void HMI_Init(void);
void HMI_Update_Model_Data(void);
void HMI_Send(uint8_t *data, uint32_t data_size);
void HMI_Process(void);
void HMI_Update_InpParams_Param(HMI_INPUT_REG_PARAMS_ENUM param, int32_t value);
void HMI_Update_RegParams_Param(HMI_REG_PARAMS_ENUM param, int32_t value);
void HMI_Update_DisInpParams_Param(void);
void myModbusParseRequest16Callback(uint8_t reg_address);
void myModbusParseRequest05Callback(uint8_t reg_address);
void HMI_Update_DisInpParams_Param(void);
void HMI_Set_DisInp_On(HMI_INP_DIS_ENUM param);
void HMI_Set_DisInp_Off(HMI_INP_DIS_ENUM param);
#endif
